/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ExternalForms;

import ExternalNonFormClasses.LogHandler;
import brms_v2.Main;
import ExternalNonFormClasses.SQLConnect;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mrRNBean
 */
public class OfficialSelection extends JDialog {

    DefaultTableModel model;
    String currentPersonViewedID, currentPersonName, position, offID, offName, adminID;
    Main main;
    SQLConnect tc;
    JTable j;
    LogHandler logHandler;

    public OfficialSelection(Main main) {
        super(main);
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);

        this.main = main;
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                enableMainHideThis();
            }
        });
    }

    public void callClass(String postion, String officialIdToReplace, String officialReplacedName, String adminID, JTable j) {

        this.j = j;
        this.adminID = adminID;
        this.position = postion;
        this.offID = officialIdToReplace;
        this.offName = officialReplacedName;

        this.setVisible(true);
        this.main.setEnabled(false);

        setViewCitizensData();
    }

    public void callClass(String postion, String adminID, JTable j) { //ADD

        this.j = j;
        this.offID = "<none>";
        this.adminID = adminID;
        this.position = postion;

        this.setVisible(true);
        this.main.setEnabled(false);

        setViewCitizensData();
    }

    public void setHandler(LogHandler logHandler) {
        this.logHandler = logHandler;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewPanel = new javax.swing.JPanel();
        searchText = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        citizens = new javax.swing.JTable();
        select = new javax.swing.JButton();
        cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        viewPanel.setBackground(new java.awt.Color(0, 102, 153));

        search.setBackground(new java.awt.Color(189, 195, 198));
        search.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        search.setForeground(new java.awt.Color(0, 102, 153));
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Select New Official");
        jLabel1.setOpaque(true);

        citizens.setBackground(new java.awt.Color(189, 195, 198));
        citizens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Citizen ID", "Last Name", "First Name", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(citizens);

        javax.swing.GroupLayout viewPanelLayout = new javax.swing.GroupLayout(viewPanel);
        viewPanel.setLayout(viewPanelLayout);
        viewPanelLayout.setHorizontalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewPanelLayout.createSequentialGroup()
                        .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(viewPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(16, Short.MAX_VALUE))
                    .addGroup(viewPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        viewPanelLayout.setVerticalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        select.setBackground(new java.awt.Color(189, 195, 198));
        select.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        select.setForeground(new java.awt.Color(0, 102, 153));
        select.setText("Select");
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });

        cancel.setBackground(new java.awt.Color(189, 195, 198));
        cancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cancel.setForeground(new java.awt.Color(0, 102, 153));
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(323, Short.MAX_VALUE)
                .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(viewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(463, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(viewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(55, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        //SECOND BUTTON BELOW VIEW CITIZENS PANEL
        if (cancel.getText().equals("back")) {
            searchText.setText("");
            cancel.setText("cancel");
            setViewCitizensData();
        } else {
            enableMainHideThis();
        }
    }//GEN-LAST:event_cancelActionPerformed

    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed
        //FIRST BUTTON BELOW VIEW CITIZENS PANEL
        if (citizens.getSelectedRow() >= 0) { //IF ITEM IS SELECTED FROM TABLE
            currentPersonViewedID = String.valueOf(citizens.getValueAt(citizens.getSelectedRow(), 0));
            currentPersonName = String.valueOf(citizens.getValueAt(citizens.getSelectedRow(), 2)) + String.valueOf(citizens.getValueAt(citizens.getSelectedRow(), 1));
            int ans = JOptionPane.showConfirmDialog(this, "Please verify.\n" + position + ": " + String.valueOf(citizens.getValueAt(citizens.getSelectedRow(), 2)) + " " + String.valueOf(citizens.getValueAt(citizens.getSelectedRow(), 1)) + "\n");

            if (ans == 0) {
                int tempOffId;
                String msg = "Succesfully Added Official!";
                tc = new SQLConnect();
                if ((tempOffId = tc.wasOfficial(currentPersonViewedID, adminID)) > 0) {
                    tc = new SQLConnect();
                    tc.changeOfficialStatus(String.valueOf(tempOffId), "active");
                } else {
                    tc = new SQLConnect();
                    tc.storeOfficial(currentPersonViewedID, position, adminID);
                }

                if (!offID.equals("<none>")) {
                    tc.changeOfficialStatus(offID, "replaced");
                    msg = "Succesfully Replaced Official!";
                    writeLogReplace("Replaced Official");
                } else {
                    writeLogAdd("Added New Official");
                }

                JOptionPane.showMessageDialog(this, msg);

                main.loadCurrentAdmin(j);
                main.setHomePanelData();
                enableMainHideThis();

            }
        }
    }//GEN-LAST:event_selectActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        //TOP BUTTON AT VIEW CITIZEN'S PANEL
        if (!searchText.getText().equals("")) {
            cancel.setText("back");
            cancel.setEnabled(true);
            setModelAndClearModelItems(citizens);
            tc = new SQLConnect();
            ResultSet rs = tc.getPerson("citizen", searchText.getText());
            try {
                for (int x = 0; rs.next(); x++) {
                    model.insertRow(x, new String[]{String.valueOf(rs.getInt("personID")), rs.getString("lname"), rs.getString("fname"), rs.getString("address")});
                }
            } catch (SQLException ex) {
                System.out.println("Error: " + ex);
            }
        }
    }//GEN-LAST:event_searchActionPerformed

    public void setModelAndClearModelItems(JTable tb) {
        //ERASES ALL DATA FROM A TABLE 
        model = (DefaultTableModel) tb.getModel();
        while (tb.getRowCount() > 0) {
            model.removeRow(0);
        }
    }

    public void writeLogAdd(String action) {
        tc.closeCon();
        tc = new SQLConnect();
        ResultSet rs = tc.getLatestOfficialID();

        try {
            logHandler.saveLog(action + " with -Administration ID: " + adminID
                    + " -New Official ID: " + rs.getInt("officialID")
                    + " -New Official Position: " + position
                    + " -New Official Person ID: " + currentPersonViewedID
                    + " -New Official Person Name: " + currentPersonName);
        } catch (SQLException ex) {
            Logger.getLogger(OfficialSelection.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void writeLogReplace(String action) {
        tc.closeCon();
        tc = new SQLConnect();
        ResultSet rs = tc.getLatestOfficialID();

        try {
            logHandler.saveLog(action + " with -Administration ID: " + adminID
                    + " -Replaced Official ID: " + offID
                    + " -Replaced Official Name: " + offName
                    + " -New Official ID: " + rs.getInt("officialID")
                    + " -Official Position: " + position
                    + " -New Official Person ID: " + currentPersonViewedID
                    + " -New Official Person Name: " + currentPersonName);
        } catch (SQLException ex) {
            Logger.getLogger(OfficialSelection.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void enableMainHideThis() {
        main.setEnabled(true);
        main.setVisible(true);
        dispose();
    }

    private void setViewCitizensData() {
        //DISPLAY ALL CITIZEN RECORDS AT VIEW CITIZENS PANEL'S TABLE
        tc = new SQLConnect();
        ResultSet rs = tc.getAllCitizenPersons();
        setModelAndClearModelItems(citizens);

        try {
            for (int x = 0; rs.next();) {
                tc = new SQLConnect();
                if (!tc.isOfficial(String.valueOf(rs.getInt("personID"))) && rs.getString("personType").equals("citizen")) {
                    model.insertRow(x, new String[]{String.valueOf(rs.getInt("personID")), rs.getString("lname"), rs.getString("fname"), rs.getString("address")});
                    x++;
                }
            }
        } catch (SQLException ex) {
            System.out.println("Error: " + ex);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JTable citizens;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchText;
    private javax.swing.JButton select;
    private javax.swing.JPanel viewPanel;
    // End of variables declaration//GEN-END:variables
}
